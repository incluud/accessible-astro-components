---
import type { ImageMetadata } from 'astro'
import { Image } from 'astro:assets'
import Heading from '../heading/Heading.astro'
import Link from '../link/Link.astro'

/**
 * Card Component
 *
 * @description A versatile card component with image, title, and content areas
 */

interface Props extends astroHTML.JSX.HTMLAttributes {
  /**
   * Additional classes to apply to the card
   */
  class?: string
  /**
   * Card's title
   * @default "Default title"
   */
  title?: string
  /**
   * URL for the card's image
   * @default "https://placehold.co/640x360"
   */
  img?: string
  /**
   * Optional Astro Image component to use instead of a regular img
   * Can be a direct ImageMetadata object or a Promise from import()
   * @default undefined
   */
  imageComponent?: ImageMetadata | Promise<{ default: ImageMetadata }>
  /**
   * Alt text for the image
   * @default ""
   */
  imageAlt?: string
  /**
   * Width of the image (required for remote images with Image component)
   * @default 640
   */
  width?: number
  /**
   * Height of the image (required for remote images with Image component)
   * @default 360
   */
  height?: number
  /**
   * Whether to infer the image size (for remote images)
   * @default false
   */
  inferSize?: boolean
  /**
   * URL for the card's link
   * @default "#"
   */
  url?: string
  /**
   * Heading level for the title (h1-h6)
   * @default "h3"
   */
  headingLevel?: 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6'
  /**
   * Visual size of the heading (can differ from semantic level)
   * @default 'h6'
   */
  headingSize?: 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6'
  /**
   * Footer content
   * @default ""
   */
  footer?: string
  /**
   * Whether the card should take full height (useful for equal height card grids)
   * @default false
   */
  fullHeight?: boolean
}

const {
  class: className,
  title = 'Default title',
  img = 'https://placehold.co/640x360',
  imageComponent,
  imageAlt = '',
  width = 640,
  height = 360,
  inferSize = false,
  url = '#',
  headingLevel = 'h3',
  headingSize = 'h6',
  footer = '',
  fullHeight = false,
  ...rest
} = Astro.props
---

<article class:list={['card', { 'card--full-height': fullHeight }, className]} {...rest}>
  <div class="image">
    {
      imageComponent ? (
        <Image src={imageComponent} alt={imageAlt} width={width} height={height} />
      ) : (
        <img src={img} alt={imageAlt} width={width} height={height} />
      )
    }
  </div>
  <div class="content">
    <div class="title">
      <Heading level={headingLevel} size={headingSize}>
        <Link href={url}>{title}</Link>
      </Heading>
    </div>
    <div class="meta"><slot name="meta" /></div>
    <p class="description"><slot /></p>
    {footer && <small class="footer">{footer}</small>}
  </div>
</article>

<style>
  :where(.card) {
    --transition-duration: 0.3s;
    --transition-easing: cubic-bezier(0.165, 0.84, 0.44, 1);

    display: flex;
    position: relative;
    flex-direction: column;
    border: 2px solid light-dark(hsl(0 0% 10%), hsl(0 0% 90%));
    border-radius: 0.5rem;
    max-inline-size: 60ch;
    max-block-size: 100%;
    overflow: hidden;
  }

  @media (prefers-reduced-motion: no-preference) {
    :where(.card) {
      transition: box-shadow var(--transition-duration) var(--transition-easing);
    }
  }

  :where(.card--full-height) {
    block-size: 100%;
  }

  :where(.card:hover),
  :where(.card:focus-within) {
    box-shadow: 0 0 0 0.25rem;
  }

  :where(.card:focus-within) a:focus {
    outline: none;
    box-shadow: none;
    text-decoration: none;
  }

  :where(.image) {
    block-size: 250px;
    overflow: clip;
  }

  :where(.image img) {
    inline-size: 100%;
    block-size: 100%;
    object-fit: cover;
  }

  @media (prefers-reduced-motion: no-preference) {
    :where(.image img) {
      transition: transform var(--transition-duration) var(--transition-easing);
    }
  }

  :where(.content) {
    display: flex;
    flex-grow: 1;
    flex-direction: column;
    gap: 0.5rem;
    padding-inline: 1rem;
    padding-block: 1rem;
  }

  :where(.card a) {
    color: currentColor;
    text-decoration: none;
  }

  :where(.card a:hover),
  :where(.card a:focus-visible) {
    text-decoration: underline;
    text-underline-offset: 4px;
  }

  :where(.card:has(a:hover, a:focus-visible) .image img) {
    transform: scale(1.05);
  }

  a::after {
    position: absolute;
    inset: 0;
    content: '';
  }

  :where(.meta) {
    order: -1;
    margin-block-start: 0.5rem;
  }

  :where(.card .meta) :global(span) {
    display: flex;
    flex-wrap: wrap;
    align-items: center;
    gap: 0.5rem;
  }

  :where(.card .meta:empty) {
    display: none;
  }

  :where(.card .description) {
    font-size: 1rem;
  }

  :where(.card .description:empty) {
    display: none;
  }

  :where(.card .footer) {
    margin-block-start: auto;
    padding-block-start: 1rem;
  }
</style>
