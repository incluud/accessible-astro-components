---
/**
 * Notification Component
 *
 * @description A versatile notification component with support for different types and ARIA roles
 */

interface Props {
  /**
   * Additional classes to apply to the Notification
   */
  class?: string
  /**
   * Notification message
   */
  message?: string
  /**
   * Type of notification
   * @default "default"
   */
  type?: 'info' | 'success' | 'warning' | 'error' | 'default'
  /**
   * Variant of the notification
   * @default "default"
   */
  variant?: 'default' | 'accent'
  /**
   * ARIA role for the notification
   * @default "none"
   */
  role?: 'none' | 'alert' | 'log' | 'marquee' | 'status' | 'timer' | 'region'
  /**
   * ARIA live region behavior
   * @default "off"
   */
  ariaLive?: 'off' | 'polite' | 'assertive'
  /**
   * HTML attributes to spread on the notification
   */
  [key: string]: string | number | boolean | undefined
}

const {
  class: className,
  message = 'This is a notification!',
  type = 'default',
  variant = 'default',
  role = 'none',
  ariaLive = 'off',
  ...rest
} = Astro.props
---

<aside
  class:list={['notification', `type-${type}`, `variant-${variant}`, className]}
  role={role}
  aria-live={ariaLive}
  {...rest}
>
  {
    variant === 'accent' && (
      <span class="icon">
        {type === 'default' && (
          <svg
            width="1.25em"
            height="1.25em"
            viewBox="0 0 24 24"
            aria-hidden="true"
            focusable="false"
          >
            <path
              fill="none"
              stroke="currentColor"
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M10.268 21a2 2 0 0 0 3.464 0m-10.47-5.674A1 1 0 0 0 4 17h16a1 1 0 0 0 .74-1.673C19.41 13.956 18 12.499 18 8A6 6 0 0 0 6 8c0 4.499-1.411 5.956-2.738 7.326"
            />
          </svg>
        )}
        {type === 'info' && (
          <svg
            width="1.25em"
            height="1.25em"
            viewBox="0 0 24 24"
            aria-hidden="true"
            focusable="false"
          >
            <g
              fill="none"
              stroke="currentColor"
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
            >
              <circle cx="12" cy="12" r="10" />
              <path d="M12 16v-4m0-4h.01" />
            </g>
          </svg>
        )}
        {type === 'success' && (
          <svg
            width="1.25em"
            height="1.25em"
            viewBox="0 0 24 24"
            aria-hidden="true"
            focusable="false"
          >
            <g
              fill="none"
              stroke="currentColor"
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
            >
              <circle cx="12" cy="12" r="10" />
              <path d="m9 12l2 2l4-4" />
            </g>
          </svg>
        )}
        {type === 'warning' && (
          <svg
            width="1.25em"
            height="1.25em"
            viewBox="0 0 24 24"
            aria-hidden="true"
            focusable="false"
          >
            <path
              fill="none"
              stroke="currentColor"
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="m21.73 18l-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3M12 9v4m0 4h.01"
            />
          </svg>
        )}
        {type === 'error' && (
          <svg
            width="1.25em"
            height="1.25em"
            viewBox="0 0 24 24"
            aria-hidden="true"
            focusable="false"
          >
            <g
              fill="none"
              stroke="currentColor"
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
            >
              <circle cx="12" cy="12" r="10" />
              <path d="m15 9l-6 6m0-6l6 6" />
            </g>
          </svg>
        )}
      </span>
    )
  }
  <slot>
    <p><strong>Message:</strong> {message}</p>
  </slot>
</aside>

<style>
  :where(.notification) {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    border: 2px solid;
    border-radius: 0.5rem;
    padding: 1rem;
  }

  :where(.notification.variant-accent) {
    position: relative;
    border: none;
    padding-inline-start: 1.25rem;

    &::before {
      position: absolute;
      inset-block-start: 0;
      inset-inline-start: 0;
      border-left: 4px solid;
      border-top-left-radius: 0.5rem;
      border-bottom-left-radius: 0.5rem;
      block-size: 100%;
      content: '';
    }

    &.type-info svg {
      color: var(--color-info-border);
    }

    &.type-success svg {
      color: var(--color-success-border);
    }

    &.type-warning svg {
      color: var(--color-warning-border);
    }

    &.type-error svg {
      color: var(--color-error-border);
    }

    &.type-default svg {
      color: var(--color-default-border);
    }
  }

  :where(.notification .icon) {
    position: absolute;
    flex-shrink: 0;
    transform: translate(calc(-50% - 1.5px), -50%);
    inset-block-start: 0;
    inset-inline-start: 0;
    border-radius: 50%;
    background-color: var(--background-color);
    padding: var(--space-3xs);
  }

  /* Default */
  :where(.notification) {
    border-color: var(--color-default-border);
    background-color: var(--color-default-bg);
    color: var(--color-default-text);

    &::before {
      border-color: var(--color-default-border);
    }
  }

  /* Info */
  :where(.notification.type-info) {
    border-color: var(--color-info-border);
    background-color: var(--color-info-bg);
    color: var(--color-info-text);

    &::before {
      border-color: var(--color-info-border);
    }
  }

  /* Success */
  :where(.notification.type-success) {
    border-color: var(--color-success-border);
    background-color: var(--color-success-bg);
    color: var(--color-success-text);

    &::before {
      border-color: var(--color-success-border);
    }
  }

  /* Warning */
  :where(.notification.type-warning) {
    border-color: var(--color-warning-border);
    background-color: var(--color-warning-bg);
    color: var(--color-warning-text);

    &::before {
      border-color: var(--color-warning-border);
    }
  }

  /* Error */
  :where(.notification.type-error) {
    border-color: var(--color-error-border);
    background-color: var(--color-error-bg);
    color: var(--color-error-text);

    &::before {
      border-color: var(--color-error-border);
    }
  }

  :where(.notification svg) :global(svg) {
    flex-shrink: 0;
  }
</style>
