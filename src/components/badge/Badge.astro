---
/**
 * Badge Component
 *
 * @description A badge component with support for different types and button variant
 */
interface Props {
  /**
   * Size of the badge
   */
  size?: 'small' | 'medium' | 'large'
  /**
   * Type of the badge
   */
  type?: 'info' | 'success' | 'warning' | 'error' | 'default'
  /**
   * Whether to render as a button element
   */
  isButton?: boolean
  /**
   * Whether to animate the icon on hover (only works with isButton)
   */
  animateOnHover?: boolean
  /**
   * Additional classes to apply
   */
  class?: string
  /**
   * Type of animation to apply on hover (when isButton is true)
   */
  animationType?: 'rotate' | 'boop' | 'bounce' | 'none'
  /**
   * Animation intensity (1-10)
   */
  animationIntensity?: number
  /**
   * Whether to display the badge as a circle (best for single numbers/characters)
   */
  isCircular?: boolean
  /**
   * Whether to apply a pulsating animation to draw attention
   */
  pulse?: boolean
  /**
   * Duration of the pulse animation in seconds
   */
  pulseDuration?: number
  /**
   * Whether the pulse animation should play infinitely
   */
  pulseInfinite?: boolean
  /**
   * Rest of props to spread
   */
  [key: string]: any
}

const {
  size = 'medium',
  type = 'default',
  isButton = false,
  animateOnHover = false,
  class: className,
  animationType = 'boop',
  animationIntensity = 5,
  isCircular = false,
  pulse = false,
  pulseDuration = 2,
  pulseInfinite = true,
  ...rest
} = Astro.props

// Calculate animation values based on intensity
const scaleAmount = 1 + animationIntensity * 0.02 // 1.02 to 1.2
const rotateAmount = animationIntensity * 2 // 2deg to 20deg

// Only apply animation class if it's a button
const shouldAnimate = isButton && animateOnHover

// Determine animation class based on type
const animationClass = shouldAnimate ? `animate-${animationType}` : ''

// Determine if we should apply the circular class
const circularClass = isCircular ? 'circular' : ''

// Determine if we should apply the pulse class
const pulseClass = pulse ? 'pulse' : ''

// Determine the animation iteration count
const iterationCount = pulseInfinite ? 'infinite' : '1'

// Generate a unique ID for the animation controls
const animationId = `badge-pulse-${Math.random().toString(36).substring(2, 11)}`
---

{
  isButton ? (
    <button
      class:list={[
        'badge',
        `size-${size}`,
        `type-${type}`,
        animationClass,
        circularClass,
        pulseClass,
        className,
      ]}
      data-pulse-duration={pulseDuration}
      data-pulse-infinite={pulseInfinite}
      data-animation-id={pulse ? animationId : undefined}
      {...rest}
    >
      <slot />
      {pulse && pulseInfinite && (
        <button
          class="pulse-control-wrapper"
          aria-label="Pause animation"
          title="Pause animation"
          data-animation-id={animationId}
        >
          <span class="pulse-control">
            <span class="pulse-control-icon pause-icon" aria-hidden="true" />
            <span class="pulse-control-icon play-icon" aria-hidden="true" />
          </span>
          <span class="visually-hidden">Toggle animation</span>
        </button>
      )}
    </button>
  ) : (
    <div
      class:list={['badge', `size-${size}`, `type-${type}`, circularClass, pulseClass, className]}
      data-pulse-duration={pulseDuration}
      data-pulse-infinite={pulseInfinite}
      data-animation-id={pulse ? animationId : undefined}
      {...rest}
    >
      <slot />
      {pulse && pulseInfinite && (
        <button
          class="pulse-control-wrapper"
          aria-label="Pause animation"
          title="Pause animation"
          data-animation-id={animationId}
        >
          <span class="pulse-control">
            <span class="pulse-control-icon pause-icon" aria-hidden="true" />
            <span class="pulse-control-icon play-icon" aria-hidden="true" />
          </span>
          <span class="visually-hidden">Toggle animation</span>
        </button>
      )}
    </div>
  )
}

<style
  define:vars={{
    scaleAmount,
    rotateAmount: `${rotateAmount}deg`,
    pulseDuration: `${pulseDuration}s`,
    iterationCount,
  }}
>
  :where(.badge) {
    --transition-duration: 0.3s;
    --transition-easing: cubic-bezier(0.165, 0.84, 0.44, 1);

    display: inline-flex;
    position: relative;
    align-items: center;
    border: 2px solid;
    border-radius: 0.5rem;
  }

  /* Button reset styles */
  :where(button.badge) {
    cursor: pointer;
    background: none;
    padding: inherit;
    font: inherit;
  }

  /* Default */
  :where(.badge) {
    border-color: light-dark(hsl(204 8% 55%), hsl(215 15% 45%));
    background-color: light-dark(hsl(200 20% 97%), hsl(215 25% 13%));
    color: light-dark(hsl(204 8% 14%), hsl(0 0% 100%));
  }

  /* Info */
  :where(.type-info) {
    border-color: light-dark(hsl(200 78% 46%), hsl(234 100% 60%));
    background-color: light-dark(hsl(198 100% 94%), hsl(234 54% 20%));
    color: light-dark(hsl(200 96% 27%), hsl(0 0% 100%));
  }

  /* Success */
  :where(.type-success) {
    border-color: light-dark(hsl(160 61% 41%), hsl(101 82% 63%));
    background-color: light-dark(hsl(160 71% 96%), hsl(101 39% 22%));
    color: light-dark(hsl(170 96% 15%), hsl(0 0% 100%));
  }

  /* Warning */
  :where(.type-warning) {
    border-color: light-dark(hsl(35 75% 49%), hsl(41 82% 63%));
    background-color: light-dark(hsl(48 100% 96%), hsl(41 39% 22%));
    color: light-dark(hsl(15 85% 30%), hsl(0 0% 100%));
  }

  /* Error */
  :where(.type-error) {
    border-color: light-dark(hsl(355 73% 51%), hsl(339 82% 63%));
    background-color: light-dark(hsl(0 100% 94%), hsl(339 39% 22%));
    color: light-dark(hsl(350 94% 19%), hsl(0 0% 100%));
  }

  /* Small */
  :where(.size-small) {
    gap: 0.25rem;
    padding: 0.125rem 0.25rem;
    font-size: 0.75rem;
  }

  /* Medium */
  :where(.size-medium) {
    gap: 0.4rem;
    padding: 0.125rem 0.35rem;
    font-size: 0.875rem;
  }

  /* Large */
  :where(.size-large) {
    gap: 0.5rem;
    padding: 0.125rem 0.5rem;
    font-size: 1rem;
  }

  /* Circular badge styles */
  :where(.circular) {
    justify-content: center;
    align-items: center;
    border-radius: 50%;
    padding: 0;
    aspect-ratio: 1 / 1;
    min-inline-size: 1.5em;
    min-block-size: 1.5em;
    text-align: center;
  }

  :where(.size-small.circular) {
    min-inline-size: 1.5em;
    min-block-size: 1.5em;
  }

  :where(.size-medium.circular) {
    min-inline-size: 1.75em;
    min-block-size: 1.75em;
  }

  :where(.size-large.circular) {
    min-inline-size: 2em;
    min-block-size: 2em;
  }

  :where(.badge) :global(svg) {
    flex-shrink: 0;
    transition: transform var(--transition-duration) var(--transition-easing);
  }

  /* Set pulse colors based on badge type */
  :where(.pulse.type-default) {
    --pulse-color: 100, 100, 100;
  }

  :where(.pulse.type-info) {
    --pulse-color: 0, 122, 255;
  }

  :where(.pulse.type-success) {
    --pulse-color: 52, 199, 89;
  }

  :where(.pulse.type-warning) {
    --pulse-color: 255, 149, 0;
  }

  :where(.pulse.type-error) {
    --pulse-color: 255, 59, 48;
  }

  /* Apply pulse animation */
  :where(.pulse) {
    animation: pulse var(--pulseDuration) cubic-bezier(0.4, 0, 0.6, 1) var(--iterationCount);
  }

  /* Paused state */
  :where(.pulse-paused) {
    animation-play-state: paused;
  }

  /* Pulse control wrapper and button */
  .pulse-control-wrapper {
    display: flex;
    position: absolute;
    justify-content: center;
    align-items: center;
    opacity: 0;
    z-index: 1;
    transition: opacity 0.2s ease;
    cursor: pointer;
    inset-block-start: -1.25rem;
    inset-inline-end: -1.25rem;
    border: none;
    border-radius: 50%;
    background: transparent;
    padding: 0;
    inline-size: 2.75rem;
    block-size: 2.75rem;
  }

  .badge:where(:hover, :focus-within) .pulse-control-wrapper {
    opacity: 1;
  }

  .pulse-control-wrapper:where(:hover, :focus-visible) .pulse-control {
    transform: scale(1.05);
    background-color: light-dark(hsl(0, 0%, 100%), hsl(0, 0%, 25%));
  }

  .pulse-control-wrapper:active .pulse-control {
    transform: scale(0.95);
  }

  .pulse-control {
    display: flex;
    position: relative;
    justify-content: center;
    align-items: center;
    transition: background-color 0.2s ease, transform 0.1s ease;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    border: 1px solid light-dark(hsl(0, 0%, 70%), hsl(0, 0%, 30%));
    border-radius: 50%;
    background-color: light-dark(hsl(0, 0%, 95%), hsl(0, 0%, 20%));
    inline-size: 1.5rem;
    block-size: 1.5rem;
    pointer-events: none;
  }

  /* Pause and play icons */
  .pulse-control-icon {
    position: absolute;
    transition: opacity 0.2s ease;
    margin: auto;
    inset: 0;
    inline-size: 0.65rem;
    block-size: 0.65rem;
  }

  .pause-icon {
    opacity: 1;
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' width='24' height='24'%3E%3Cpath fill='none' d='M0 0h24v24H0z'/%3E%3Cpath d='M6 5h2v14H6V5zm10 0h2v14h-2V5z' fill='rgba(100,100,100,1)'/%3E%3C/svg%3E");
    background-position: center;
    background-size: contain;
    background-repeat: no-repeat;
  }

  .play-icon {
    opacity: 0;
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' width='24' height='24'%3E%3Cpath fill='none' d='M0 0h24v24H0z'/%3E%3Cpath d='M19.376 12.416L8.777 19.482A.5.5 0 0 1 8 19.066V4.934a.5.5 0 0 1 .777-.416l10.599 7.066a.5.5 0 0 1 0 .832z' fill='rgba(100,100,100,1)'/%3E%3C/svg%3E");
    background-position: center;
    background-size: contain;
    background-repeat: no-repeat;
  }

  .pulse-control-wrapper.is-paused .pause-icon {
    opacity: 0;
  }

  .pulse-control-wrapper.is-paused .play-icon {
    opacity: 1;
  }

  /* Dark mode icon colors */
  @media (prefers-color-scheme: dark) {
    .pause-icon {
      background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' width='24' height='24'%3E%3Cpath fill='none' d='M0 0h24v24H0z'/%3E%3Cpath d='M6 5h2v14H6V5zm10 0h2v14h-2V5z' fill='rgba(220,220,220,1)'/%3E%3C/svg%3E");
    }

    .play-icon {
      background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' width='24' height='24'%3E%3Cpath fill='none' d='M0 0h24v24H0z'/%3E%3Cpath d='M19.376 12.416L8.777 19.482A.5.5 0 0 1 8 19.066V4.934a.5.5 0 0 1 .777-.416l10.599 7.066a.5.5 0 0 1 0 .832z' fill='rgba(220,220,220,1)'/%3E%3C/svg%3E");
    }
  }

  /* Animation classes - apply only to SVG icons */
  button.animate-boop:where(:hover, :focus-visible) :global(svg) {
    animation: boop 0.5s cubic-bezier(0.165, 0.84, 0.44, 1) forwards;
  }

  button.animate-bounce:where(:hover, :focus-visible) :global(svg) {
    animation: bounce 0.5s cubic-bezier(0.165, 0.84, 0.44, 1) forwards;
  }

  button.animate-rotate:where(:hover, :focus-visible) :global(svg) {
    animation: rotate 0.5s cubic-bezier(0.165, 0.84, 0.44, 1) forwards;
  }

  /* Respect user preferences */
  @media (prefers-reduced-motion: reduce) {
    button.animate-boop:where(:hover, :focus-visible) :global(svg),
    button.animate-bounce:where(:hover, :focus-visible) :global(svg),
    button.animate-rotate:where(:hover, :focus-visible) :global(svg) {
      transform: none;
      animation: none;
    }

    :where(.pulse) {
      animation: none;
      box-shadow: 0 0 0 2px rgba(var(--pulse-color, 0, 0, 0), 0.3);
    }
  }
</style>

<script>
  // Handle pulse animation controls
  document.addEventListener('DOMContentLoaded', () => {
    const pulseControls = document.querySelectorAll('.pulse-control-wrapper')

    pulseControls.forEach((button) => {
      button.addEventListener('click', () => {
        const animationId = (button as HTMLElement).dataset.animationId
        const badge = document.querySelector(`[data-animation-id="${animationId}"]`)

        if (badge) {
          badge.classList.toggle('pulse-paused')
          const isPaused = badge.classList.contains('pulse-paused')

          button.setAttribute('aria-label', isPaused ? 'Play animation' : 'Pause animation')
          button.setAttribute('title', isPaused ? 'Play animation' : 'Pause animation')
          button.classList.toggle('is-paused', isPaused)
        }
      })
    })
  })
</script>
