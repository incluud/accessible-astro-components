---
/**
 * Textarea Component
 *
 * @description A progressive enhancement textarea field with built-in validation and accessibility
 */

interface Props {
  /**
   * Additional classes to apply to the textarea field container
   */
  class?: string
  /**
   * Unique identifier for the textarea field
   */
  id?: string
  /**
   * Name attribute for the textarea field (required for form submission)
   */
  name: string
  /**
   * Label text for the textarea field
   */
  label: string
  /**
   * Error message to display when validation fails
   */
  'data-validation'?: string
  /**
   * Whether the field is required
   * @default false
   */
  required?: boolean
  /**
   * Custom validation pattern (regex)
   */
  'data-validation-pattern'?: string
  /**
   * Custom validation function name (must be available on window)
   */
  'data-validation-fn'?: string
  /**
   * Whether the field is disabled
   * @default false
   */
  disabled?: boolean
  /**
   * Whether the field is readonly
   * @default false
   */
  readonly?: boolean
  /**
   * Autocomplete attribute value
   * @default "on"
   */
  autocomplete?: string
  /**
   * Number of visible text lines
   */
  rows?: number
  /**
   * Number of visible text columns
   */
  cols?: number
  /**
   * Placeholder text
   */
  placeholder?: string
  /**
   * HTML attributes
   */
  [key: string]: any
}

const {
  class: className,
  id,
  name,
  label,
  'data-validation': dataValidation,
  required = false,
  'data-validation-pattern': dataValidationPattern,
  'data-validation-fn': dataValidationFn,
  value,
  disabled = false,
  readonly = false,
  autocomplete = 'on',
  rows,
  cols,
  placeholder,
  ...rest
} = Astro.props

const inputId = id || `textarea-${name}`

// Generate default validation message
const getDefaultValidationMessage = (isRequired: boolean): string => {
  return isRequired ? 'This field is required' : ''
}

// Use provided validation message or default
const validationMessage = dataValidation || getDefaultValidationMessage(required)
---

<div class="textarea-group">
  <label for={inputId} data-validation={validationMessage}>
    <span>{label}</span>
    {required && <span>(required)</span>}
  </label>

  <textarea
    id={inputId}
    name={name}
    required={required}
    disabled={disabled}
    readonly={readonly}
    autocomplete={autocomplete}
    rows={rows}
    cols={cols}
    placeholder={placeholder}
    aria-describedby={`${inputId}-validation`}
    data-validation={validationMessage}
    data-validation-pattern={dataValidationPattern}
    data-validation-fn={dataValidationFn}
    {...rest}>{value}</textarea
  >

  <small id={`${inputId}-validation`}>
    <span class="icon">
      <svg width="1em" height="1em" viewBox="0 0 24 24" aria-hidden="true" focusable="false">
        <g
          fill="none"
          stroke="currentColor"
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
        >
          <circle cx="12" cy="12" r="10"></circle>
          <path d="m15 9l-6 6m0-6l6 6"></path>
        </g>
      </svg>
    </span>
    <span class="message"></span>
  </small>
</div>

<style>
  :where(.textarea-group) {
    --text-color: var(--color-default-text);

    display: grid;
    gap: var(--space-4xs);
  }

  :where(.textarea-group label) {
    display: flex;
    flex-wrap: wrap;
    align-items: center;
    gap: var(--space-3xs);
  }

  :where(.textarea-group textarea) {
    border: 2px solid var(--color-default-border);
    border-radius: var(--radius-s);
    padding: var(--space-2xs);
    min-block-size: 10em;
    resize: vertical;
  }

  :where(.textarea-group small) {
    display: none;
    align-items: center;
    gap: var(--space-4xs);
    margin-block-start: var(--space-2xs);
    color: var(--text-color);
  }

  .textarea-group:has([aria-invalid='true']) {
    --text-color: light-dark(hsl(355, 78%, 39%), hsl(339, 88%, 69%));
  }

  .textarea-group:has([aria-invalid='true']) label {
    color: var(--text-color);
  }

  .textarea-group:has([aria-invalid='true']) textarea {
    border-color: var(--color-error-border);
  }

  .textarea-group:has([aria-invalid='true']) small {
    display: flex;
  }
</style>
