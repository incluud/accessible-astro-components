---
interface Props {
  // Note: name attribute is valid HTML for <details> but not yet recognized by TypeScript
  name?: string
  title: string
  children: any
}

const { name, title } = Astro.props
---

<li class="accordion__item">
  <details class="accordion__wrapper" name={name}>
    <summary class="accordion__title">
      <h3>
        <span class="accordion__title-icon">
          <svg width="20" height="2" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path fill="currentColor" d="M20 .5v1H0v-1z"></path>
          </svg>
          <svg width="2" height="20" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path fill="currentColor" d="M1.5 20h-1V0h1z"></path>
          </svg>
        </span>
        {title}
      </h3>
    </summary>
    <div class="accordion__content">
      <slot />
    </div>
  </details>
</li>

<style is:global>
  .accordion__wrapper {
    border-top: 2px solid light-dark(#202020, #dddddd);
    interpolate-size: allow-keywords;

    &::details-content {
      opacity: 0;
      block-size: 0;
      overflow-y: clip;

      @media (prefers-reduced-motion: no-preference) {
        transition: content-visibility 0.2s allow-discrete, opacity 0.2s ease-in-out, block-size 0.2s ease-in-out;
      }
    }

    &[open] {
      &::details-content {
        opacity: 1;
        block-size: auto;
      }

      svg:last-of-type {
        inset-block-start: 0;
        transform: rotate(90deg);
      }
    }
  }

  .accordion__title {
    display: flex;
    padding-block: 0.75rem;
    cursor: pointer;
    list-style: none;

    &::marker,
    &::-webkit-details-marker {
      display: none;
      content: '';
    }

    &:where(:hover, :focus-visible) {
      h3 {
        text-decoration: underline;
        text-underline-offset: 4px;
      }
    }

    h3 {
      display: flex;
      align-items: center;
      gap: 1rem;
      font-size: 1.25rem;
      font-weight: normal;
    }
  }

  .accordion__title-icon {
    position: relative;
    display: inline-block;
    block-size: 20px;
    aspect-ratio: 1;

    svg {
      position: absolute;
      inset-block-start: 50%;
      inset-inline-start: 50%;
      transform: translate(-50%, -50%);

      &:first-of-type {
        inset-inline-start: 0;
        transform: translateY(-50%);
      }

      &:last-of-type {
        --rotation: 0deg;
        transform: translateY(-50%) rotate(var(--rotation));

        @media (prefers-reduced-motion: no-preference) {
          transition: transform 0.2s ease-in-out, inset-block-start 0.2s ease-in-out;
        }
      }
    }
  }

  .accordion__content {
    padding: 0 0 1.5rem 2.2rem;

    a {
      display: inline-block;
    }

    & > *:not(:first-child) {
      margin-block-start: 0.75rem;
    }
  }

  .accordion__wrapper[open] {
    .accordion__title-icon svg:last-of-type {
      --rotation: 90deg;
    }
  }
</style>
